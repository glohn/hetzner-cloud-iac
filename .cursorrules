# Hetzner Cloud Infrastructure - Critical Rules

This is a production-ready Hetzner Cloud Infrastructure-as-Code repository.

## IMPORTANT NOTE
This file enforces critical deployment rules for Cursor AI.

## MANDATORY RULES - NEVER IGNORE

### CRITICAL SETUP SEQUENCE - NEVER VIOLATE
- **NEVER run scripts/setup-providers.sh without .auto.tfvars files existing**
- **NEVER run terraform commands without real credentials configured**
- **MANDATORY ORDER: 1) Create .auto.tfvars 2) Configure credentials 3) ONLY THEN scripts/setup-providers.sh**
- **NEVER ask for credential values - ALWAYS copy template and open with edit_file immediately**

### Proactive Resource Discovery & UX
- ALWAYS search for existing resources BEFORE asking user (SSH keys, config files, etc.)
- ASK QUESTIONS ONE AT A TIME, never overwhelm with multiple questions
- SHOW INITIATIVE: Check filesystem, probe for existing setup, discover what's available
- ONLY ask user for information you cannot discover yourself
- Example: `ls ~/.ssh/*.pub` before asking "Do you have SSH keys?"
- Example: Check if files exist before asking "Are these configured?"
- SINGLE QUESTION FLOW: Ask → Wait for answer → Next question
- NEVER give "summary questions" - always individual, sequential questions

### Smart Question Patterns
- PREFER Yes/No questions over open-ended questions
- PREFER confirmation questions: "Should I use X?" instead of "Which X do you want?"
- SUGGEST the best option and ask for confirmation
- BAD: "Which SSH Key do you want to use?"
- GOOD: "Should I use your most modern SSH Key (id_ed25519.pub)?"
- ALWAYS provide escape hatch: "Yes" or "No (then tell me which other one)"

### File Handling
- ALWAYS use edit_file tool to open configuration files for user editing
- NEVER use command-line editors (nano, vim, etc.) for configuration files
- NEVER automate sensitive credential entry
- Template workflow: cp template → IMMEDIATELY edit_file → Wait for user
- cp is ONLY allowed for copying templates, NEVER for final configuration

### Credentials & Security
- NEVER invent demo values for API tokens, domains, or credentials
- ALWAYS ask user for real values before proceeding
- NEVER proceed without real Hetzner credentials
- NEVER suggest placeholder values

### Service Deployment
- KEEP ALL server_type_* variables as null by default
- NEVER enable services without explicit user request
- Focus on base infrastructure first (VPC, DNS, networking)
- Services only after base infrastructure is confirmed working

### Prerequisites Verification
- VERIFY all 4 Hetzner credentials exist before deployment
- VERIFY domain is managed by Hetzner DNS
- VERIFY 2 separate Hetzner projects are created
- STOP if any prerequisite missing

### Deployment Sequence
- FOLLOW exact sequence: tfstate → tf-base → tf-vm
- NEVER skip phases or run out of order
- ALWAYS run scripts/setup-providers.sh before first deployment
- SEARCH for existing SSH keys BEFORE asking user (ls ~/.ssh/*.pub)

### Initial Setup Detection
- CHECK: Do .auto.tfvars files exist? (If not = initial setup)
- CHECK: Do providers.tf files exist? (If not = need setup-providers.sh)
- CHECK: Do terraform state files exist? (If not = never been deployed)
- IF initial setup: Keep ALL server_type_* as null

### Workflow Enforcement
1. Check prerequisites first
2. Copy template files with cp
3. IMMEDIATELY open files with edit_file
4. Wait for user to provide real values
5. Proceed only after user confirmation

## FORBIDDEN ACTIONS
- Command-line editors (nano, vim, etc.)
- Automated credential insertion
- Service activation without explicit request
- Demo/placeholder values
- Skipping prerequisite verification
- Copying templates without immediately opening for editing
- Skipping deployment sequence (tfstate → tf-base → tf-vm)

## REQUIRED PATTERN
```
1. SEARCH for existing resources first (SSH keys, configs, etc.)
2. Ask for real values ONE AT A TIME (credentials, domain, etc.)
3. Copy template: cp source dest  
4. IMMEDIATELY open for editing: edit_file dest
5. Wait for user to edit and save
6. Proceed only after user confirmation
7. Follow sequence: tfstate → tf-base → tf-vm
```

## FAIL-SAFE QUESTIONS
Before any action ask:
- Am I about to invent demo values? → STOP
- Am I about to use terminal editors? → STOP
- Am I about to enable services? → CONFIRM FIRST
- Am I about to automate sensitive config? → OPEN FILE INSTEAD
- Did I copy a template? → IMMEDIATELY OPEN WITH edit_file
- Am I skipping deployment sequence? → STOP
- Did I search for existing resources first? → REQUIRED
- Am I asking multiple questions at once? → STOP, ask one at a time 
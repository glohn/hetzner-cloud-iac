# Hetzner Cloud Infrastructure - Critical Rules

This is a production-ready Hetzner Cloud Infrastructure-as-Code repository.

## IMPORTANT NOTE
This file enforces critical deployment rules for Cursor AI.

## META-RULE - ALWAYS FIRST
- **EVALUATE ALL RULES FIRST** - Read and evaluate ALL rules completely before making ANY changes
- **NEVER start modifications until all rules are processed**
- **PLAN COMPLETELY, then execute**
- **THINK THROUGH all implications before acting**

## MANDATORY RULES - NEVER IGNORE

### TEMPLATE HANDLING RULES - CRITICAL PRECISION
- **Template workflow: cp template → IMMEDIATELY OPEN WITH edit_file → Wait for user**
- **ALLOWED modifications to templates:**
  - ✅ Add ONE comment line at top
  - ✅ Set service passwords (*_password variables) to example values
  - ✅ Set ssh_key_path (01-tf-base, 02-tf-vm only) to discovered SSH key
  - ✅ Set allowed_ssh_ips (01-tf-base only) to discovered IP address
  - ❌ NO OTHER CHANGES ALLOWED
- **FORBIDDEN modifications:**
  - ❌ Change API credentials (must keep placeholders like "hcloud_api_token")
  - ❌ Add new variables not in original template
  - ❌ Change variable names from original template
  - ❌ Modify any other content beyond comment + service passwords + ssh_key_path + allowed_ssh_ips

### IP ADDRESS DISCOVERY RULES - MANDATORY
- **NEVER use generic IP discovery** (curl ifconfig.me) - returns IPv6 which breaks Hetzner Cloud SSH
- **Hetzner Cloud SSH rules require IPv4 ONLY**
- **ALWAYS use IPv4-specific commands:**
  - ✅ `curl -4 ifconfig.me` 
  - ✅ `curl -s ipv4.icanhazip.com`
  - ❌ `curl ifconfig.me` (can return IPv6)
- **ALWAYS validate IP format before using:**
  - ✅ IPv4 format: x.x.x.x/32 (e.g., "192.168.1.1/32")
  - ❌ IPv6 format: xxxx:xxxx:xxxx/128 (incompatible with Hetzner Cloud SSH)
- **Context validation:** Check if discovered values are compatible with target system

### VALUE VALIDATION RULES - MANDATORY
- **NEVER assume template values are still placeholders**
- **ALWAYS ask user if values are already correct** before suggesting changes
- **NEVER automatically "correct" values** without user confirmation
- **Example:** "Are these values already correct, or do they need adjustment?"
- **STOP assuming** - START confirming
- **Template-looking values may be intentionally set by user**

### CRITICAL SETUP SEQUENCE - NEVER VIOLATE
- **NEVER run scripts/setup-providers.sh without .auto.tfvars files existing**
- **NEVER run terraform commands without real credentials configured**
- **MANDATORY ORDER: 1) Create .auto.tfvars 2) Configure credentials 3) ONLY THEN scripts/setup-providers.sh**
- **NEVER ask for credential values - ALWAYS copy template and open with edit_file immediately**

### Proactive Resource Discovery & UX
- ALWAYS search for existing resources BEFORE asking user (SSH keys, config files, etc.)
- ASK QUESTIONS ONE AT A TIME, never overwhelm with multiple questions
- SHOW INITIATIVE: Check filesystem, probe for existing setup, discover what's available
- ONLY ask user for information you cannot discover yourself
- Example: `ls ~/.ssh/*.pub` before asking "Do you have SSH keys?"
- Example: Check if files exist before asking "Are these configured?"
- SINGLE QUESTION FLOW: Ask → Wait for answer → Next question
- NEVER give "summary questions" - always individual, sequential questions

### Smart Question Patterns
- PREFER Yes/No questions over open-ended questions
- PREFER confirmation questions: "Should I use X?" instead of "Which X do you want?"
- SUGGEST the best option and ask for confirmation
- BAD: "Which SSH Key do you want to use?"
- GOOD: "Should I use your most modern SSH Key (id_ed25519.pub)?"
- ALWAYS provide escape hatch: "Yes" or "No (then tell me which other one)"

### File Handling & Credentials
- ALWAYS use edit_file tool to open configuration files for user editing
- NEVER use command-line editors (nano, vim, etc.) for configuration files
- **GOAL: When information is needed → open file → user enters it**
- **Follow TEMPLATE HANDLING RULES above for precise modification guidelines**

### Automatic vs Manual Configuration per Module
- **00-tfstate:** NO automatic variables (ssh_key_path does not exist here)
- **01-tf-base:** ssh_key_path (discovered SSH key), domain (keep placeholder)
- **02-tf-vm:** ssh_key_path (discovered SSH key)
- **ALL MODULES - MANUAL (keep placeholders):** API credentials (*_token, *_key variables)
- **ALL MODULES - EXAMPLE VALUES:** service passwords (*_password variables)
- **CRITICAL:** NEVER add variables that don't exist in original template

### Credentials & Security
- NEVER invent demo values for API tokens, domains, or credentials
- NEVER proceed without real Hetzner credentials
- NEVER suggest placeholder values for API credentials
- **Service passwords (rabbitmq, mysql, etc.) may have example values**
- **API credentials must keep original placeholders (e.g., "hcloud_api_token")**

### Service Deployment
- KEEP ALL server_type_* variables as null by default
- NEVER enable services without explicit user request
- Focus on base infrastructure first (VPC, DNS, networking)
- Services only after base infrastructure is confirmed working

### Prerequisites Verification
- VERIFY all 4 Hetzner credentials exist before deployment
- VERIFY domain is managed by Hetzner DNS
- VERIFY 2 separate Hetzner projects are created
- STOP if any prerequisite missing

### Deployment Sequence
- FOLLOW exact sequence: tfstate → tf-base → tf-vm
- NEVER skip phases or run out of order
- ALWAYS run scripts/setup-providers.sh before first deployment
- SEARCH for existing SSH keys BEFORE asking user (ls ~/.ssh/*.pub)

### Initial Setup Detection
- CHECK: Do .auto.tfvars files exist? (If not = initial setup)
- CHECK: Do providers.tf files exist? (If not = need setup-providers.sh)
- CHECK: Do terraform state files exist? (If not = never been deployed)
- IF initial setup: Keep ALL server_type_* as null

### Workflow Enforcement
1. Check prerequisites first
2. Copy template files with cp
3. IMMEDIATELY open files with edit_file (follow TEMPLATE HANDLING RULES: add comment + set service passwords)
4. Wait for user to provide real values
5. Proceed only after user confirmation

## FORBIDDEN ACTIONS
- Command-line editors (nano, vim, etc.)
- Automated credential insertion
- Service activation without explicit request
- Demo/placeholder values for API credentials
- Skipping prerequisite verification
- Copying templates without immediately opening for editing
- Skipping deployment sequence (tfstate → tf-base → tf-vm)
- **Violating TEMPLATE HANDLING RULES (see above for precise guidelines)**
- **Starting modifications before evaluating all rules**

## REQUIRED PATTERN
```
1. EVALUATE ALL RULES FIRST - Plan completely before acting
2. SEARCH for existing resources first (SSH keys, configs, etc.)
3. Copy template: cp source dest  
4. IMMEDIATELY open for editing: edit_file dest (follow TEMPLATE HANDLING RULES: add comment + set service passwords + ssh_key_path + allowed_ssh_ips)
5. Wait for user to edit and save
6. Proceed only after user confirmation
7. Follow sequence: tfstate → tf-base → tf-vm
```

## FAIL-SAFE QUESTIONS
Before any action ask:
- **Did I evaluate ALL rules first?** → REQUIRED
- **Am I following TEMPLATE HANDLING RULES precisely?** → REQUIRED
- **Am I using IPv4-specific IP discovery?** → REQUIRED (never generic curl ifconfig.me)
- **Did I validate IP format for target system?** → REQUIRED (IPv4 only for Hetzner Cloud SSH)
- **Am I assuming values are wrong without asking?** → STOP, confirm first
- Am I about to invent demo values? → STOP
- Am I about to use terminal editors? → STOP
- Am I about to enable services? → CONFIRM FIRST
- Am I about to automate sensitive config? → OPEN FILE INSTEAD
- Did I copy a template? → IMMEDIATELY OPEN WITH edit_file (follow TEMPLATE HANDLING RULES: add comment + set service passwords + ssh_key_path + allowed_ssh_ips)
- Am I skipping deployment sequence? → STOP
- Did I search for existing resources first? → REQUIRED
- Am I asking multiple questions at once? → STOP, ask one at a time 
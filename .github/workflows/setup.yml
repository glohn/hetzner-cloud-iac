name: Setup Infrastructure Configuration

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Project name (used for bucket naming and usernames)'
        required: true
        default: 'my-project'
      
      bucket_prefix:
        description: 'Bucket prefix (your personal prefix, e.g. your-name)'
        required: true
        default: 'yourname'
      
      domain_name:
        description: 'Domain name (must be managed by Hetzner DNS)'
        required: true
        default: 'example.com'
      
      hetzner_location:
        description: 'Hetzner location'
        required: true
        default: 'nbg1'
        type: choice
        options:
        - nbg1
        - fsn1
        - hel1
      
      ssh_public_key:
        description: 'Your SSH public key (e.g. ssh-ed25519 AAA... user@host)'
        required: true
      
      allowed_ssh_ip:
        description: 'Your IP for SSH access (format: x.x.x.x/32)'
        required: true
      
      rabbitmq_admin_password:
        description: 'RabbitMQ admin password'
        required: false
        default: 'SecureRabbitMQ2025!'
      
      mysql_root_password:
        description: 'MySQL root password'
        required: false
        default: 'SecureMySQL2025!'
      
      mysql_app_password:
        description: 'MySQL application password'
        required: false
        default: 'SecureApp2025!'

env:
  TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
  TF_VAR_hcloud_dns_token: ${{ secrets.HCLOUD_DNS_TOKEN }}
  TF_VAR_s3_access_key: ${{ secrets.S3_ACCESS_KEY }}
  TF_VAR_s3_secret_key: ${{ secrets.S3_SECRET_KEY }}

jobs:
  validate-secrets:
    name: Validate Repository Secrets
    runs-on: ubuntu-latest
    
    steps:
    - name: Check required secrets
      run: |
        echo "Validating required repository secrets..."
        
        if [ -z "${{ secrets.HCLOUD_TOKEN }}" ]; then
          echo "‚ùå HCLOUD_TOKEN secret is missing"
          echo "Please add it in Settings > Secrets and variables > Actions"
          exit 1
        fi
        
        if [ -z "${{ secrets.HCLOUD_DNS_TOKEN }}" ]; then
          echo "‚ùå HCLOUD_DNS_TOKEN secret is missing"
          echo "Please add it in Settings > Secrets and variables > Actions"
          exit 1
        fi
        
        if [ -z "${{ secrets.S3_ACCESS_KEY }}" ]; then
          echo "‚ùå S3_ACCESS_KEY secret is missing"
          echo "Please add it in Settings > Secrets and variables > Actions"
          exit 1
        fi
        
        if [ -z "${{ secrets.S3_SECRET_KEY }}" ]; then
          echo "‚ùå S3_SECRET_KEY secret is missing"
          echo "Please add it in Settings > Secrets and variables > Actions"
          exit 1
        fi
        
        echo "‚úÖ All required secrets are configured"

  setup-configuration:
    name: Generate Configuration Files
    runs-on: ubuntu-latest
    needs: validate-secrets
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Validate SSH IP format
      id: validate-ip
      run: |
        SSH_IP="${{ github.event.inputs.allowed_ssh_ip }}"
        echo "ssh_ip=${SSH_IP}" >> $GITHUB_OUTPUT
        echo "Using SSH IP: ${SSH_IP}"
    
    - name: Extract SSH key user
      id: ssh-key
      run: |
        SSH_KEY="${{ github.event.inputs.ssh_public_key }}"
        SSH_USER=$(echo "$SSH_KEY" | awk '{print $3}' | cut -d'@' -f1)
        echo "ssh_user=${SSH_USER}" >> $GITHUB_OUTPUT
        echo "Extracted SSH user: ${SSH_USER}"
    
    - name: Generate secrets.auto.tfvars
      run: |
        echo "Creating 00-tfstate/secrets.auto.tfvars..."
        cat > 00-tfstate/secrets.auto.tfvars << EOF
        # Generated by GitHub Workflow - DO NOT COMMIT TO VERSION CONTROL
        # Hetzner Cloud API credentials
        
        s3_access_key    = "${{ secrets.S3_ACCESS_KEY }}"
        s3_secret_key    = "${{ secrets.S3_SECRET_KEY }}"
        hcloud_token     = "${{ secrets.HCLOUD_TOKEN }}"
        hcloud_dns_token = "${{ secrets.HCLOUD_DNS_TOKEN }}"
        
        # Service Passwords
        rabbitmq_admin_password = "${{ github.event.inputs.rabbitmq_admin_password }}"
        rds_root_password       = "${{ github.event.inputs.mysql_root_password }}"
        rds_app_password        = "${{ github.event.inputs.mysql_app_password }}"
        EOF
        
        echo "‚úÖ Created secrets.auto.tfvars"
    
    - name: Generate 00-tfstate/terraform.auto.tfvars
      run: |
        echo "Creating 00-tfstate/terraform.auto.tfvars..."
        cp 00-tfstate/terraform.tfvars 00-tfstate/terraform.auto.tfvars
        
        # Update values using sed
        sed -i 's/project[[:space:]]*=.*/project = "${{ github.event.inputs.project_name }}"/' 00-tfstate/terraform.auto.tfvars
        sed -i 's/bucket_prefix[[:space:]]*=.*/bucket_prefix = "${{ github.event.inputs.bucket_prefix }}"/' 00-tfstate/terraform.auto.tfvars
        sed -i 's/location[[:space:]]*=.*/location = "${{ github.event.inputs.hetzner_location }}"/' 00-tfstate/terraform.auto.tfvars
        sed -i 's/minio_domain[[:space:]]*=.*/minio_domain = "your-objectstorage.com"/' 00-tfstate/terraform.auto.tfvars
        
        echo "‚úÖ Created 00-tfstate/terraform.auto.tfvars"
    
    - name: Generate 01-tf-base/terraform.auto.tfvars
      run: |
        echo "Creating 01-tf-base/terraform.auto.tfvars..."
        cp 01-tf-base/terraform.tfvars 01-tf-base/terraform.auto.tfvars
        
        # Update domain name
        sed -i 's/domainname[[:space:]]*=.*/domainname = "${{ github.event.inputs.domain_name }}"/' 01-tf-base/terraform.auto.tfvars
        
        # Update SSH key
        sed -i 's/"[^"]*" = "[^"]*"/"${{ steps.ssh-key.outputs.ssh_user }}" = "${{ github.event.inputs.ssh_public_key }}"/' 01-tf-base/terraform.auto.tfvars
        
        # Update allowed SSH IPs
        sed -i '/allowed_ssh_ips = \[/,/\]/c\
        allowed_ssh_ips = [\
          "${{ steps.validate-ip.outputs.ssh_ip }}"\
        ]' 01-tf-base/terraform.auto.tfvars
        
        echo "‚úÖ Created 01-tf-base/terraform.auto.tfvars"
    
    - name: Generate 02-tf-vm/terraform.auto.tfvars
      run: |
        echo "Creating 02-tf-vm/terraform.auto.tfvars..."
        cp 02-tf-vm/terraform.tfvars 02-tf-vm/terraform.auto.tfvars
        
        echo "‚úÖ Created 02-tf-vm/terraform.auto.tfvars"
    
    - name: Generate provider configurations
      run: |
        echo "Generating provider configurations from templates..."
        chmod +x ./scripts/setup-providers.sh
        ./scripts/setup-providers.sh
        
        echo "‚úÖ Generated all providers.tf files"
    
    - name: Validate Terraform configuration
      run: |
        echo "Installing Terraform..."
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com jammy main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update && sudo apt install terraform=1.10.3-1
        
        echo "Validating Terraform configurations..."
        
        cd 00-tfstate && terraform init -backend=false && terraform validate && cd ..
        cd 01-tf-base && terraform init -backend=false && terraform validate && cd ..
        cd 02-tf-vm && terraform init -backend=false && terraform validate && cd ..
        
        echo "‚úÖ All Terraform configurations are valid"
    
    - name: Commit configuration to project branch
      run: |
        echo "Committing configuration to project branch..."
        BRANCH_NAME="project-${{ github.event.inputs.project_name }}"
        
        # Configure git
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Create or switch to project branch
        git checkout -b $BRANCH_NAME || git checkout $BRANCH_NAME
        
        # Add configuration files (non-sensitive only)
        git add 00-tfstate/terraform.auto.tfvars
        git add 00-tfstate/providers.tf
        git add 01-tf-base/terraform.auto.tfvars
        git add 01-tf-base/providers.tf
        git add 02-tf-vm/terraform.auto.tfvars
        git add 02-tf-vm/providers.tf
        
        # Commit configuration
        git commit -m "Setup ${{ github.event.inputs.project_name }}: $(date '+%Y-%m-%d %H:%M:%S')"
        git push origin $BRANCH_NAME
        
        echo "‚úÖ Configuration committed to branch: $BRANCH_NAME"
    
    - name: Setup completed
      run: |
        echo ""
        echo "üéâ Setup completed successfully!"
        echo ""
        echo "Configuration generated for:"
        echo "- Project: ${{ github.event.inputs.project_name }}"
        echo "- Domain: ${{ github.event.inputs.domain_name }}"
        echo "- Location: ${{ github.event.inputs.hetzner_location }}"
        echo "- SSH User: ${{ steps.ssh-key.outputs.ssh_user }}"
        echo "- SSH IP: ${{ steps.validate-ip.outputs.ssh_ip }}"
        echo ""
        echo "üìã Next Steps:"
        echo "1. Review the generated configuration in the project-${{ github.event.inputs.project_name }} branch"
        echo "2. Run the 'Deploy Infrastructure' workflow to provision resources"
        echo ""
        echo "‚ö†Ô∏è  Note: Generated secrets.auto.tfvars contains sensitive data"
        echo "    It's not committed to branch for security reasons" 
name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm infrastructure destruction'
        required: true
        
      skip_state_storage:
        description: 'Skip destroying state storage (keep S3 bucket)'
        required: false
        type: boolean
        default: true
        
      auto_approve:
        description: 'Auto-approve Terraform destroy (skip plan review)'
        required: false
        type: boolean
        default: false

env:
  TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
  TF_VAR_hcloud_dns_token: ${{ secrets.HCLOUD_DNS_TOKEN }}
  TF_VAR_s3_access_key: ${{ secrets.S3_ACCESS_KEY }}
  TF_VAR_s3_secret_key: ${{ secrets.S3_SECRET_KEY }}
  TF_IN_AUTOMATION: true

jobs:
  validate-destroy:
    name: Validate Destroy Request
    runs-on: ubuntu-latest
    
    steps:
    - name: Validate confirmation
      run: |
        if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
          echo "❌ Invalid confirmation. You must type 'DESTROY' exactly to proceed."
          echo "This is a safety mechanism to prevent accidental infrastructure destruction."
          exit 1
        fi
        
        echo "✅ Destroy confirmation validated"
        echo ""
        echo "⚠️  WARNING: This will destroy your infrastructure!"
        echo "- All virtual machines will be terminated"
        echo "- All data on attached volumes will be lost"
        echo "- DNS records will be removed"
        echo "- Certificates will be revoked"
        if [ "${{ github.event.inputs.skip_state_storage }}" != "true" ]; then
          echo "- Terraform state storage will be destroyed"
          echo "- ALL TERRAFORM STATE WILL BE LOST"
        fi

  prepare-destroy:
    name: Prepare Destroy Environment
    runs-on: ubuntu-latest
    needs: validate-destroy
    outputs:
      has-config: ${{ steps.check-config.outputs.has-config }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download latest configuration
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: s3-ready-config
        path: .
        
    - name: Check configuration files
      id: check-config
      run: |
        echo "Checking for required configuration files..."
        
        MISSING_FILES=""
        for file in "00-tfstate/terraform.auto.tfvars" "00-tfstate/providers.tf" "01-tf-base/terraform.auto.tfvars" "01-tf-base/providers.tf" "02-tf-vm/terraform.auto.tfvars" "02-tf-vm/providers.tf"; do
          if [ ! -f "$file" ]; then
            MISSING_FILES="$MISSING_FILES $file"
          fi
        done
        
        if [ -n "$MISSING_FILES" ]; then
          echo "⚠️  Warning: Missing configuration files:$MISSING_FILES"
          echo "Will attempt to use repository defaults"
          echo "has-config=false" >> $GITHUB_OUTPUT
        else
          echo "✅ All configuration files found"
          echo "has-config=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Create fallback configuration if needed
      if: ${{ steps.check-config.outputs.has-config == 'false' }}
      run: |
        echo "Creating fallback configuration from repository defaults..."
        
        # Copy templates as fallback
        cp 00-tfstate/terraform.tfvars 00-tfstate/terraform.auto.tfvars 2>/dev/null || true
        cp 01-tf-base/terraform.tfvars 01-tf-base/terraform.auto.tfvars 2>/dev/null || true
        cp 02-tf-vm/terraform.tfvars 02-tf-vm/terraform.auto.tfvars 2>/dev/null || true
        
        # Generate provider configs if script exists
        if [ -f "./scripts/setup-providers.sh" ]; then
          chmod +x ./scripts/setup-providers.sh
          ./scripts/setup-providers.sh 2>/dev/null || echo "Could not generate providers - using templates"
        fi
        
        echo "⚠️  Using fallback configuration - some resources might not be detected"
        
    - name: Recreate secrets.auto.tfvars
      run: |
        echo "Recreating secrets.auto.tfvars for destroy operations..."
        cat > 00-tfstate/secrets.auto.tfvars << 'EOF'
        # Generated by GitHub Workflow - DO NOT COMMIT TO VERSION CONTROL
        # Hetzner Cloud API credentials
        
        s3_access_key    = "${{ secrets.S3_ACCESS_KEY }}"
        s3_secret_key    = "${{ secrets.S3_SECRET_KEY }}"
        hcloud_token     = "${{ secrets.HCLOUD_TOKEN }}"
        hcloud_dns_token = "${{ secrets.HCLOUD_DNS_TOKEN }}"
        
        # Service Passwords (using defaults)
        rabbitmq_admin_password = "SecureRabbitMQ2025!"
        rds_root_password       = "SecureMySQL2025!"
        rds_app_password        = "SecureApp2025!"
        EOF
        
        echo "✅ Recreated secrets.auto.tfvars"
        
    - name: Install Terraform
      run: |
        echo "Installing Terraform..."
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com jammy main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update && sudo apt install terraform=1.10.3-1
        
        terraform version
        
    - name: Upload destroy-ready configuration
      uses: actions/upload-artifact@v4
      with:
        name: destroy-ready-config
        path: |
          00-tfstate/
          01-tf-base/
          02-tf-vm/
        retention-days: 7

  destroy-virtual-machines:
    name: Destroy Virtual Machines
    runs-on: ubuntu-latest
    needs: [validate-destroy, prepare-destroy]
    
    steps:
    - name: Download destroy configuration
      uses: actions/download-artifact@v4
      with:
        name: destroy-ready-config
        path: .
        
    - name: Install Terraform
      run: |
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com jammy main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update && sudo apt install terraform=1.10.3-1
        
    - name: Terraform Plan - Destroy Virtual Machines
      working-directory: 02-tf-vm
      continue-on-error: true
      run: |
        echo "Planning virtual machines destruction..."
        terraform init || {
          echo "⚠️  Could not initialize terraform - VMs might not exist"
          exit 0
        }
        terraform plan -destroy -out=tfplan
        
    - name: Show Terraform Destroy Plan
      if: ${{ github.event.inputs.auto_approve == 'false' }}
      working-directory: 02-tf-vm
      continue-on-error: true
      run: |
        echo "::group::Terraform Destroy Plan Output"
        terraform show -no-color tfplan || echo "No destroy plan available"
        echo "::endgroup::"
        
    - name: Wait for manual approval
      if: ${{ github.event.inputs.auto_approve == 'false' }}
      run: |
        echo "⏳ Manual approval required for virtual machines destruction"
        echo "Review the destroy plan above and re-run this workflow with 'auto_approve: true' to proceed"
        exit 1
        
    - name: Terraform Destroy - Virtual Machines
      working-directory: 02-tf-vm
      continue-on-error: true
      run: |
        echo "Destroying virtual machines..."
        if [ -f "tfplan" ]; then
          terraform apply -auto-approve tfplan
        else
          terraform destroy -auto-approve
        fi
        
        echo "✅ Virtual machines destroyed"

  destroy-base-infrastructure:
    name: Destroy Base Infrastructure
    runs-on: ubuntu-latest
    needs: [validate-destroy, prepare-destroy, destroy-virtual-machines]
    
    steps:
    - name: Download destroy configuration
      uses: actions/download-artifact@v4
      with:
        name: destroy-ready-config
        path: .
        
    - name: Install Terraform
      run: |
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com jammy main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update && sudo apt install terraform=1.10.3-1
        
    - name: Terraform Plan - Destroy Base Infrastructure
      working-directory: 01-tf-base
      continue-on-error: true
      run: |
        echo "Planning base infrastructure destruction..."
        terraform init || {
          echo "⚠️  Could not initialize terraform - base infrastructure might not exist"
          exit 0
        }
        terraform plan -destroy -out=tfplan
        
    - name: Show Terraform Destroy Plan
      if: ${{ github.event.inputs.auto_approve == 'false' }}
      working-directory: 01-tf-base
      continue-on-error: true
      run: |
        echo "::group::Terraform Destroy Plan Output"
        terraform show -no-color tfplan || echo "No destroy plan available"
        echo "::endgroup::"
        
    - name: Wait for manual approval
      if: ${{ github.event.inputs.auto_approve == 'false' }}
      run: |
        echo "⏳ Manual approval required for base infrastructure destruction"
        echo "Review the destroy plan above and re-run this workflow with 'auto_approve: true' to proceed"
        exit 1
        
    - name: Terraform Destroy - Base Infrastructure
      working-directory: 01-tf-base
      continue-on-error: true
      run: |
        echo "Destroying base infrastructure..."
        if [ -f "tfplan" ]; then
          terraform apply -auto-approve tfplan
        else
          terraform destroy -auto-approve
        fi
        
        echo "✅ Base infrastructure destroyed"

  destroy-state-storage:
    name: Destroy State Storage
    runs-on: ubuntu-latest
    needs: [validate-destroy, prepare-destroy, destroy-virtual-machines, destroy-base-infrastructure]
    if: ${{ github.event.inputs.skip_state_storage == 'false' }}
    
    steps:
    - name: Download destroy configuration
      uses: actions/download-artifact@v4
      with:
        name: destroy-ready-config
        path: .
        
    - name: Install Terraform
      run: |
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com jammy main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update && sudo apt install terraform=1.10.3-1
        
    - name: Switch back to local backend
      working-directory: 00-tfstate
      run: |
        echo "Switching backend from S3 to local for state storage destruction..."
        
        # Disable S3 backend and enable local backend
        sed -i -e 's/^  backend "s3" {/  #backend "s3" {/' \
               -e 's/^    /  #  /' \
               -e 's/^  }/  #}/' \
               -e 's/^  #backend "local" {/  backend "local" {/' \
               -e 's/^  #  path = "terraform.tfstate"/    path = "terraform.tfstate"/' \
               -e '/^    path = "terraform.tfstate"$/,/^  #}$/ s/^  #}/  }/' \
               providers.tf
               
        echo "Backend configuration switched to local"
        
    - name: Download state from S3
      working-directory: 00-tfstate
      continue-on-error: true
      run: |
        echo "Attempting to download state from S3 before destruction..."
        
        # Try to get the state file from S3 first
        terraform init -migrate-state || {
          echo "⚠️  Could not migrate state from S3 - proceeding with local state"
        }
        
    - name: Terraform Plan - Destroy State Storage
      working-directory: 00-tfstate
      continue-on-error: true
      run: |
        echo "Planning state storage destruction..."
        terraform plan -destroy -out=tfplan
        
    - name: Show Terraform Destroy Plan
      if: ${{ github.event.inputs.auto_approve == 'false' }}
      working-directory: 00-tfstate
      continue-on-error: true
      run: |
        echo "::group::Terraform Destroy Plan Output"
        terraform show -no-color tfplan || echo "No destroy plan available"
        echo "::endgroup::"
        
    - name: Final confirmation for state storage
      if: ${{ github.event.inputs.auto_approve == 'false' }}
      run: |
        echo "🚨 FINAL WARNING: About to destroy Terraform state storage!"
        echo ""
        echo "This will:"
        echo "- Delete the S3 bucket containing all Terraform state"
        echo "- Make it impossible to manage infrastructure via Terraform"
        echo "- Require manual cleanup of any remaining resources"
        echo ""
        echo "⏳ Manual approval required for state storage destruction"
        echo "Review the destroy plan above and re-run this workflow with 'auto_approve: true' to proceed"
        exit 1
        
    - name: Terraform Destroy - State Storage
      working-directory: 00-tfstate
      continue-on-error: true
      run: |
        echo "🚨 Destroying state storage - THIS CANNOT BE UNDONE!"
        if [ -f "tfplan" ]; then
          terraform apply -auto-approve tfplan
        else
          terraform destroy -auto-approve
        fi
        
        echo "✅ State storage destroyed"
        echo "⚠️  All Terraform state has been permanently lost"

  destruction-summary:
    name: Destruction Summary
    runs-on: ubuntu-latest
    needs: [validate-destroy, prepare-destroy, destroy-virtual-machines, destroy-base-infrastructure]
    if: always()
    
    steps:
    - name: Destruction completed
      run: |
        echo ""
        echo "🗑️  Infrastructure destruction completed!"
        echo ""
        echo "Destroyed components:"
        echo "✅ Virtual Machines and Services"
        echo "✅ Base Infrastructure (VPC, DNS, certificates)"
        if [ "${{ github.event.inputs.skip_state_storage }}" == "false" ]; then
          echo "✅ State Storage (S3 bucket)"
          echo "⚠️  ALL TERRAFORM STATE HAS BEEN LOST"
        else
          echo "⏭️  State Storage (S3 bucket) - SKIPPED"
          echo "ℹ️  Terraform state is preserved for future use"
        fi
        echo ""
        echo "📋 Post-destruction checklist:"
        echo "1. Verify in Hetzner Cloud Console that resources are gone"
        echo "2. Check Hetzner DNS Console for remaining DNS records"
        echo "3. Review any manual cleanup needed for:"
        echo "   - Custom firewall rules"
        echo "   - Manual DNS records"
        echo "   - SSH keys (if no longer needed)"
        if [ "${{ github.event.inputs.skip_state_storage }}" == "true" ]; then
          echo "4. State storage preserved - you can redeploy anytime"
        else
          echo "4. ⚠️  Complete rebuild required - no state preserved"
        fi
        echo ""
        echo "Thank you for using Hetzner Cloud IaC! 👋" 
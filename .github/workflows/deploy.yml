name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      auto_approve:
        description: 'Auto-approve Terraform apply (skip plan review)'
        required: false
        type: boolean
        default: false
      
      download_artifact:
        description: 'Download configuration from latest Setup workflow'
        required: false
        type: boolean
        default: true

env:
  TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
  TF_VAR_hcloud_dns_token: ${{ secrets.HCLOUD_DNS_TOKEN }}
  TF_VAR_s3_access_key: ${{ secrets.S3_ACCESS_KEY }}
  TF_VAR_s3_secret_key: ${{ secrets.S3_SECRET_KEY }}
  TF_IN_AUTOMATION: true

jobs:
  prepare-deployment:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      has-config: ${{ steps.check-config.outputs.has-config }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download configuration artifacts
      if: ${{ github.event.inputs.download_artifact == 'true' }}
      uses: actions/download-artifact@v4
      with:
        name: terraform-configuration
        path: .
        
    - name: Check configuration files
      id: check-config
      run: |
        echo "Checking for required configuration files..."
        
        MISSING_FILES=""
        for file in "00-tfstate/terraform.auto.tfvars" "00-tfstate/providers.tf" "01-tf-base/terraform.auto.tfvars" "01-tf-base/providers.tf" "02-tf-vm/terraform.auto.tfvars" "02-tf-vm/providers.tf"; do
          if [ ! -f "$file" ]; then
            MISSING_FILES="$MISSING_FILES $file"
          fi
        done
        
        if [ -n "$MISSING_FILES" ]; then
          echo "❌ Missing configuration files:$MISSING_FILES"
          echo "Please run the 'Setup Infrastructure Configuration' workflow first"
          echo "has-config=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "✅ All configuration files found"
          echo "has-config=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Recreate secrets.auto.tfvars
      run: |
        echo "Recreating secrets.auto.tfvars (not in artifacts for security)..."
        cat > 00-tfstate/secrets.auto.tfvars << 'EOF'
        # Generated by GitHub Workflow - DO NOT COMMIT TO VERSION CONTROL
        # Hetzner Cloud API credentials
        
        s3_access_key    = "${{ secrets.S3_ACCESS_KEY }}"
        s3_secret_key    = "${{ secrets.S3_SECRET_KEY }}"
        hcloud_token     = "${{ secrets.HCLOUD_TOKEN }}"
        hcloud_dns_token = "${{ secrets.HCLOUD_DNS_TOKEN }}"
        
        # Service Passwords (using defaults - modify in Setup workflow if needed)
        rabbitmq_admin_password = "SecureRabbitMQ2025!"
        rds_root_password       = "SecureMySQL2025!"
        rds_app_password        = "SecureApp2025!"
        EOF
        
        echo "✅ Recreated secrets.auto.tfvars"
        
    - name: Install Terraform
      run: |
        echo "Installing Terraform..."
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com jammy main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update && sudo apt install terraform=1.10.3-1
        
        terraform version
        
    - name: Upload prepared configuration
      uses: actions/upload-artifact@v4
      with:
        name: deployment-ready-config
        path: |
          00-tfstate/
          01-tf-base/
          02-tf-vm/
        retention-days: 7

  deploy-state-storage:
    name: Deploy State Storage
    runs-on: ubuntu-latest
    needs: prepare-deployment
    if: ${{ needs.prepare-deployment.outputs.has-config == 'true' }}
    outputs:
      state-bucket-created: ${{ steps.apply-state.outputs.bucket-created }}
    
    steps:
    - name: Download deployment configuration
      uses: actions/download-artifact@v4
      with:
        name: deployment-ready-config
        path: .
        
    - name: Install Terraform
      run: |
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com jammy main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update && sudo apt install terraform=1.10.3-1
        
    - name: Terraform Plan - State Storage
      working-directory: 00-tfstate
      run: |
        echo "Planning state storage deployment..."
        terraform init
        terraform plan -out=tfplan
        
    - name: Show Terraform Plan
      if: ${{ github.event.inputs.auto_approve == 'false' }}
      working-directory: 00-tfstate
      run: |
        echo "::group::Terraform Plan Output"
        terraform show -no-color tfplan
        echo "::endgroup::"
        
    - name: Wait for manual approval
      if: ${{ github.event.inputs.auto_approve == 'false' }}
      run: |
        echo "⏳ Manual approval required for state storage deployment"
        echo "Review the plan above and re-run this workflow with 'auto_approve: true' to proceed"
        exit 1
        
    - name: Terraform Apply - State Storage
      id: apply-state
      working-directory: 00-tfstate
      run: |
        echo "Deploying state storage..."
        terraform apply -auto-approve tfplan
        
        # Check if S3 bucket was created
        if terraform output bucket_name >/dev/null 2>&1; then
          echo "bucket-created=true" >> $GITHUB_OUTPUT
          echo "✅ State storage deployed successfully"
        else
          echo "bucket-created=false" >> $GITHUB_OUTPUT
          echo "❌ Failed to create state storage"
          exit 1
        fi

  migrate-to-s3:
    name: Migrate State to S3
    runs-on: ubuntu-latest
    needs: [prepare-deployment, deploy-state-storage]
    if: ${{ needs.deploy-state-storage.outputs.state-bucket-created == 'true' }}
    
    steps:
    - name: Download deployment configuration
      uses: actions/download-artifact@v4
      with:
        name: deployment-ready-config
        path: .
        
    - name: Install Terraform
      run: |
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com jammy main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update && sudo apt install terraform=1.10.3-1
        
    - name: Switch to S3 backend configuration
      working-directory: 00-tfstate
      run: |
        echo "Switching backend configuration from local to S3..."
        
        # Enable S3 backend and disable local backend
        sed -i -e 's/^  #backend "s3" {/  backend "s3" {/' \
               -e 's/^  #  /    /' \
               -e 's/^  #}/  }/' \
               -e 's/^  backend "local" {/  #backend "local" {/' \
               -e 's/^    path = "terraform.tfstate"/  #  path = "terraform.tfstate"/' \
               -e '/^  #  path = "terraform.tfstate"$/,/^  }$/ s/^  }/  #}/' \
               providers.tf
               
        echo "Backend configuration updated"
        
    - name: Migrate state to S3
      working-directory: 00-tfstate
      run: |
        echo "Migrating Terraform state from local to S3..."
        echo "yes" | terraform init -migrate-state
        
        echo "✅ State migrated to S3 successfully"
        
    - name: Upload updated configuration
      uses: actions/upload-artifact@v4
      with:
        name: s3-ready-config
        path: |
          00-tfstate/
          01-tf-base/
          02-tf-vm/
        retention-days: 7

  deploy-base-infrastructure:
    name: Deploy Base Infrastructure
    runs-on: ubuntu-latest
    needs: [prepare-deployment, deploy-state-storage, migrate-to-s3]
    
    steps:
    - name: Download S3-ready configuration
      uses: actions/download-artifact@v4
      with:
        name: s3-ready-config
        path: .
        
    - name: Install Terraform
      run: |
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com jammy main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update && sudo apt install terraform=1.10.3-1
        
    - name: Terraform Plan - Base Infrastructure
      working-directory: 01-tf-base
      run: |
        echo "Planning base infrastructure deployment..."
        terraform init
        terraform plan -out=tfplan
        
    - name: Show Terraform Plan
      if: ${{ github.event.inputs.auto_approve == 'false' }}
      working-directory: 01-tf-base
      run: |
        echo "::group::Terraform Plan Output"
        terraform show -no-color tfplan
        echo "::endgroup::"
        
    - name: Wait for manual approval
      if: ${{ github.event.inputs.auto_approve == 'false' }}
      run: |
        echo "⏳ Manual approval required for base infrastructure deployment"
        echo "Review the plan above and re-run this workflow with 'auto_approve: true' to proceed"
        exit 1
        
    - name: Terraform Apply - Base Infrastructure
      working-directory: 01-tf-base
      run: |
        echo "Deploying base infrastructure..."
        terraform apply -auto-approve tfplan
        
        echo "✅ Base infrastructure deployed successfully"

  deploy-virtual-machines:
    name: Deploy Virtual Machines
    runs-on: ubuntu-latest
    needs: [prepare-deployment, deploy-state-storage, migrate-to-s3, deploy-base-infrastructure]
    
    steps:
    - name: Download S3-ready configuration
      uses: actions/download-artifact@v4
      with:
        name: s3-ready-config
        path: .
        
    - name: Install Terraform
      run: |
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com jammy main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update && sudo apt install terraform=1.10.3-1
        
    - name: Terraform Plan - Virtual Machines
      working-directory: 02-tf-vm
      run: |
        echo "Planning virtual machines deployment..."
        terraform init
        terraform plan -out=tfplan
        
    - name: Show Terraform Plan
      if: ${{ github.event.inputs.auto_approve == 'false' }}
      working-directory: 02-tf-vm
      run: |
        echo "::group::Terraform Plan Output"
        terraform show -no-color tfplan
        echo "::endgroup::"
        
    - name: Wait for manual approval
      if: ${{ github.event.inputs.auto_approve == 'false' }}
      run: |
        echo "⏳ Manual approval required for virtual machines deployment"
        echo "Review the plan above and re-run this workflow with 'auto_approve: true' to proceed"
        exit 1
        
    - name: Terraform Apply - Virtual Machines
      working-directory: 02-tf-vm
      run: |
        echo "Deploying virtual machines..."
        terraform apply -auto-approve tfplan
        
        echo "✅ Virtual machines deployed successfully"
        
    - name: Deployment Summary
      run: |
        echo ""
        echo "🎉 Infrastructure deployment completed successfully!"
        echo ""
        echo "Deployed components:"
        echo "✅ State Storage (S3 bucket)"
        echo "✅ Base Infrastructure (VPC, DNS, certificates)"
        echo "✅ Virtual Machines (services as configured)"
        echo ""
        echo "📋 Next steps:"
        echo "1. Check Hetzner Cloud Console for deployed resources"
        echo "2. SSH access configured for the IP you specified"
        echo "3. Services will be configured automatically via Ansible"
        echo ""
        echo "🔗 Access your infrastructure:"
        echo "- Domain: Check your Hetzner DNS zone for created records"
        echo "- SSH: Use the configured SSH key and allowed IP" 